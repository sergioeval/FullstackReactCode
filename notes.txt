Starting a new Project 
- mkdir server
- cd server
- npm init

Installing Express
- npm install --save express

----------------------------------------
video 10.- Generating Express App 
- created a index.js file first - this is our root file 
- modifying index.js 

to run the project we used: 
- node index.js

Video 11.- Express route handlers

------------------------------------
Video 13.- Heroku CLI 
- heroku.com
- added this to package.json to Heroku to know what versions to use 
"engines": {
    "node": "14.15.4",
    "npm": "6.14.10"
  }

To tell heroku what commands tu use to star the application. 
This is also done inside the package.json file in scripts

"scripts": {
    "start": "node index.js"
}

-------------------------------------
Video 14 .- Installing the Heroku cli 
- heroku cli lo baje desde google buscando heroku cli 
- para hcer log in usamos : heroku login 
- para crear na app en heroku : heroku create 
- we are going to see the git link where we need to push our repositori 
In this case is https://git.heroku.com/fierce-beyond-15410.git
- para agregarlo lo hacmeo con: git remote add heroku https://git.heroku.com/fierce-beyond-15410.git

- y para hacer push del repositorio en mi caso fue: git push heroku sev_dev 

NOTA: En mi caso 
lo que hice fue desde la pagina de heroku
pude indicar cual era el branch que yo queria hacer deploy del repositorio de github
de esta forma es mas sencillo hacerlo sin la necesidad de utilizar heroku cli 

-------------------------------------
Video 17 .- Intro to Google OAuth
- we can use this section in any proyect 

-------------------------------------
Video 18 .- The OAuth Flow

explicacion de como funciona el flow de la autentication 

-------------------------------------
Video 19 .- Overview of Passport js

Cuando instlamos passport en realidad estamos instalando 2 lbrerias 
una es Passport y la otra es passport strategy 
EN nuestro caso , instalamos la estrategia de google strategy 

This is the passport js webpage. http://www.passportjs.org/packages/

-------------------------------------
video 20 .- passport setup 

installing passport:
npm install --save passport passport-google-oauth20


-------------------------------------
video 23.- Enabling google OAuth api 

solo explica como obtener los secrets que se explicaron en los pantallazos 

-------------------------------------
video 24.- Securing API keys 

creating the config folder 
and the keys.js 
DO NOT COMMIT THIS FILE 

-------------------------------------
video 25 .- google strategy options 

------------------------------------
video 26 .- Testing OAuth 
creating the route to use here. 

--------------------------------
video 27 .- Authorized redirect URI's

podemos ver que para que la applicacion redireccione correctamente al
usuario, la url del callback debe estar autoarizada en google cloud 
si no , nos saldra un error 

--------------------------------
Video 28 .- Oauth callbacks 

con este eror
Cannot GET /auth/google/callback
podemos ver que ahora regresamosa nuestro servidor 
pero esta url no esta creada todavia 


--------------------------------
video 29.- Access and refresh tokens 

-------------------------------
Video 30 .- NOdemon setup 
esto es para no tener que estar reseteando el server cada vez que hacemos 
cambios. 
Para instalarlo : npm install --save nodemon

despues hicimos este cambio en package.json
en la parte de scripts , agregamos 
"dev": "nodemon index.js"

Enotonces ahora para correr el proyecto en development lo hacemos con: 
- npm run dev

-------------------------------
video 31.- Server Structure Refactor

Refactoring our code 

-------------------------------
Video 32 .- The Theory of Authentication

Token is going to be useful for use to 
create the cokie base authentication 

-------------------------------
Video 33.- Signing in users with OAuth

-------------------------------
Video 34 .- Introduction to MongoDB

-------------------------------
Video 35.- MongoDB atlas Setup and Configuration

Mongodb example 


const MongoClient = require('mongodb').MongoClient;
const uri = "mongodb+srv://sergio:<password>@emaily.7zwk1.mongodb.net/myFirstDatabase?retryWrites=true&w=majority";
const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });
client.connect(err => {
  const collection = client.db("test").collection("devices");
  // perform actions on the collection object
  client.close();
});



---------------------------------------
Video 36.- Mlab setup 
Pero esto ya lo tenia configurado en mongo atlas ya que Mlab ya no existe

---------------------------------------

Video 37.- Mongoose connect Update

Change your connect method to look like this:

mongoose.connect(keys.mongoURI, {
    useNewUrlParser: true,
    useCreateIndex: true,
    useUnifiedTopology: true,
  });


-------------------------------------

Video 38.- Connecting mongoose to mongo

To install mongoose we did >> npm install --save mongoose





















