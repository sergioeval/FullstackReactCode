Starting a new Project 

- mkdir server
- cd server
- npm init

Installing Express
- npm install --save express

----------------------------------------
video 10.- Generating Express App 
- created a index.js file first - this is our root file 
- modifying index.js 

to run the project we used: 
- node index.js

Video 11.- Express route handlers

------------------------------------
Video 13.- Heroku CLI 
- heroku.com
- added this to package.json to Heroku to know what versions to use 
"engines": {
    "node": "14.15.4",
    "npm": "6.14.10"
  }

To tell heroku what commands tu use to star the application. 
This is also done inside the package.json file in scripts

"scripts": {
    "start": "node index.js"
}

-------------------------------------
Video 14 .- Installing the Heroku cli 
- heroku cli lo baje desde google buscando heroku cli 
- para hcer log in usamos : heroku login 
- para crear na app en heroku : heroku create 
- we are going to see the git link where we need to push our repositori 
In this case is https://git.heroku.com/fierce-beyond-15410.git
- para agregarlo lo hacmeo con: git remote add heroku https://git.heroku.com/fierce-beyond-15410.git

- y para hacer push del repositorio en mi caso fue: git push heroku sev_dev 

NOTA: En mi caso 
lo que hice fue desde la pagina de heroku
pude indicar cual era el branch que yo queria hacer deploy del repositorio de github
de esta forma es mas sencillo hacerlo sin la necesidad de utilizar heroku cli 

-------------------------------------
Video 17 .- Intro to Google OAuth
- we can use this section in any proyect 

-------------------------------------
Video 18 .- The OAuth Flow

explicacion de como funciona el flow de la autentication 

-------------------------------------
Video 19 .- Overview of Passport js

Cuando instlamos passport en realidad estamos instalando 2 lbrerias 
una es Passport y la otra es passport strategy 
EN nuestro caso , instalamos la estrategia de google strategy 

This is the passport js webpage. http://www.passportjs.org/packages/

-------------------------------------
video 20 .- passport setup 

installing passport:
npm install --save passport passport-google-oauth20


-------------------------------------
video 23.- Enabling google OAuth api 

solo explica como obtener los secrets que se explicaron en los pantallazos 

-------------------------------------
video 24.- Securing API keys 

creating the config folder 
and the keys.js 
DO NOT COMMIT THIS FILE 

-------------------------------------
video 25 .- google strategy options 

------------------------------------
video 26 .- Testing OAuth 
creating the route to use here. 

--------------------------------
video 27 .- Authorized redirect URI's

podemos ver que para que la applicacion redireccione correctamente al
usuario, la url del callback debe estar autoarizada en google cloud 
si no , nos saldra un error 

--------------------------------
Video 28 .- Oauth callbacks 

con este eror
Cannot GET /auth/google/callback
podemos ver que ahora regresamosa nuestro servidor 
pero esta url no esta creada todavia 


--------------------------------
video 29.- Access and refresh tokens 

-------------------------------
Video 30 .- NOdemon setup 
esto es para no tener que estar reseteando el server cada vez que hacemos 
cambios. 
Para instalarlo : npm install --save nodemon

despues hicimos este cambio en package.json
en la parte de scripts , agregamos 
"dev": "nodemon index.js"

Enotonces ahora para correr el proyecto en development lo hacemos con: 
- npm run dev

-------------------------------
video 31.- Server Structure Refactor

Refactoring our code 

-------------------------------
Video 32 .- The Theory of Authentication

Token is going to be useful for use to 
create the cokie base authentication 

-------------------------------
Video 33.- Signing in users with OAuth

-------------------------------
Video 34 .- Introduction to MongoDB

-------------------------------
Video 35.- MongoDB atlas Setup and Configuration

Mongodb example 


const MongoClient = require('mongodb').MongoClient;
const uri = "mongodb+srv://sergio:<password>@emaily.7zwk1.mongodb.net/myFirstDatabase?retryWrites=true&w=majority";
const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });
client.connect(err => {
  const collection = client.db("test").collection("devices");
  // perform actions on the collection object
  client.close();
});



---------------------------------------
Video 36.- Mlab setup 
Pero esto ya lo tenia configurado en mongo atlas ya que Mlab ya no existe

---------------------------------------

Video 37.- Mongoose connect Update

Change your connect method to look like this:

mongoose.connect(keys.mongoURI, {
    useNewUrlParser: true,
    useCreateIndex: true,
    useUnifiedTopology: true,
  });


-------------------------------------

Video 38.- Connecting mongoose to mongo

To install mongoose we did >> npm install --save mongoose

------------------------------------

Video 39.- Breather and review

--------------------------------
Video 40.- Mongoose model classes

Creating the Models folder and the user.js file 
Here we are going to create our mongoose model class 

mongoose want to know all the fields of a document 
that is why we need the schema property 

-----------------------------------------
Video 41 .- Saving model instances

-----------------------------------
Video 43 .- Mongoose Queries 

Funcion para encontrar un record y agregar si no existe in

User.findOne({
				googleId: profile.id,
			}).then(function (existingUser) {
				if (existingUser) {
					//we already have a record with the given id
				} else {
					// we dont have it , crete a new record
					new User({ googleId: profile.id }).save();
				}
			});

----------------------------------------
Video 44 .- Passport Callbacks 

------------------------------
Video 45.- Enconding Users 

es para proporcionar el token indentificador de cada usuario 
este token se mantendra durante toda la sesion 

se crearon las funciones para hacer el serializado y des-serealizado del user 

------------------------
Video 46.- Deserialize User 

------------------------
Video 47.- Enabling cookies

npm install --save cookie-session 
Para tener instalado el tema de las cookies ya que 
express no sabe como manejar eso 

-------------------------
Video 48.- Testing authentication

we just aded code to the authRoutes.js file 

-----------------------------
video 49.- Loggin out users 

modifiying the authRoutes file with the loggout 

----------------------
video 50 optional - Deeper Dive 

middleware - are small functions that can be use to modify incomming request before they are sent out to route handdlers 

----------------------------------
SESION 5: dev vs prod environments 
video 51 .- dev vs prod keys 


---------------------------------
------------------ CRETING THE REACT APP ------------------------------


Section 6: moving to the client side
video 58.- npx Create React App Generation

To better install react we just do this: 
npx create-react-app client 
esto creo una carpeta llamada client , creo que aqui es donde se instalo todo 

esto lo hice en la carpeta principal del server


Estando en la carpeta de Client
corremos npm start
para inicial el server de react 

react has its own server 

----------------------------------------------------
Video 61.- Running client and server 

first we modified the json file in the server 
Now the scripts look like this: 

"scripts": {
		"start": "node index.js",
		"server": "nodemon index.js",
		"client":"npm run start --prefix client",
		"dev": "concurrently \"npm run server\" \"npm run client\""
	}

Tambien instalamos concurrently de esta forma
>> npm install --save concurrently

--------------------------------------------------------
Video 62.- Important create react app proxy update 

we need to go to the client directory 
we need to install the http-proxy-middleware libreay 
we need to install the newest one fom version 1
https://github.com/chimurai/http-proxy-middleware/releases

1.3.1 is the newest in this case 

>> npm install http-proxy-middleware@1.3.1

***Do not add changeOrigin: true to your proxy script, it will completely break our redirects!***

Make sure you don't add the proxy configuration to the package.json file as shown in the video lectures. If you do, you'll get the following error:''

-----------------------------------------------------
Video 63.- Routing stumbling block

-----------------------------------------
Video 64 .- The beauty of create react app's proxy

aqui para arreglar el problema agregamos en la consola de google la siguiente liga tambien 
lo hicimos en el proyecto de development solamente por el momento
http://localhost:3000/auth/google/callback

-------------------------------------------
Video 65.- Why this arquitecture

se seleccionop este tipo de arquitectura 
por el hecho de que estamos usando un loog in usando cookies 


------------------------------------------
SECTION 7 : DEVELOPIING THE CLIENT SIDE 

video 66.- async/await siyntax 




-------------------------------------
Video 69 .- Front end Tech 

----------------------------------
video 70.- Installing root modules 

He will delete all the files in the clien/src folder
but we didn't delete the proxy one. 

to install things for react we need to do everything in the cient folder 
we will install this components:
>> npm install --save redux react-redux react-router-dom 

empezamos a crear el archivo index.js de react src 

----------------------------------------------------
Video 71.- Installing root modules

--------------------------------------------
Video 72 .-  Trobleshooting NPM 

Yo no tenia ningun error 
pero el lo suluciono 
Borrando el file package-lock.json
y despues corriendo el comando
>> npm install 
en la carpeta de client. 


-------------------------------
Video 73.- Redux review and setup 

in this section we modified information in the client/src index file and App file also 

------------------------------------
Video 74.-  finishing the reducer setup 

----------------------------------
Video 77.- React router setup 

--------------------------------
Video 81.- Materialize CSS

In this video we saw that the best way source for 
css code and give a good look to our page is in the web page 
materializecss.com

Materialize csss can be installed in the project 
----------------------------------
 Video 85 .- additional proxy rules 

 instaling axios 
 >> npm install --save axios redux-thunk


------------------------------
Video 86 .- Basics of redux thunk 


----------------------------
Video 100.- Exploring Stripe API 

We are going to use Stribe checkout 
to show a credict card form to our users 
We are going to user stribe checkout react in this case 
If we do a google search for stribe checkout react we are going to find the github for 
this library by azmenak/react-stribe-checkout

to install this library 
>> npm install --save react-stripe-checkout


-----------------------
Video 101.- stripe API keys 

We created the keys in config/dev.js and config/prod.js  
We also added the stripe keys in the Heroku envionment variables 

-----------------------------------
Video 102.- Env Variables with React 

Nos dimos cuenta que en el front end estamos usando un sistema de modulos diferente (using import instead of require)
Este sistema de modulos no se puede insertar en una logica para decidir si importamos un archivo cuando estamos en prod 
o importamos otro cuando estamos en dev. 

Para poder usar el manejo de keys en el front end lo que haremos es
una solucion que ya viene con create-react-app 

create-react-app environemnt variables
adding custom environment variables

lo que hacemos es crear las env variables en nuestra maquina 
las variables deben comenzar con REACT_APP_ 

por el hecho de que todos podemos estar usando diferentes OS 
lo que haremos es definir un archivo .env para las variables que necesitamos 
este file debe estar en el root del proyecto 




























